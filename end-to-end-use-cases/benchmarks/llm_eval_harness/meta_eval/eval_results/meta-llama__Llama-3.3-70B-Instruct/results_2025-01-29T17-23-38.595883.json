{
  "results": {
    "meta_instruct": {
      "exact_match,strict-match": 0.43,
      "exact_match_stderr,strict-match": 0.049756985195624284,
      "alias": "meta_instruct"
    },
    "meta_mmlu_pro_instruct": {
      "exact_match,strict-match": 0.43,
      "exact_match_stderr,strict-match": 0.049756985195624284,
      "alias": " - meta_mmlu_pro_instruct"
    }
  },
  "groups": {
    "meta_instruct": {
      "exact_match,strict-match": 0.43,
      "exact_match_stderr,strict-match": 0.049756985195624284,
      "alias": "meta_instruct"
    }
  },
  "group_subtasks": {
    "meta_instruct": [
      "meta_mmlu_pro_instruct"
    ]
  },
  "configs": {
    "meta_mmlu_pro_instruct": {
      "task": "meta_mmlu_pro_instruct",
      "dataset_path": "meta-llama/Llama-3.1-70B-Instruct-evals",
      "dataset_name": "Llama-3.1-70B-Instruct-evals__mmlu_pro__details",
      "test_split": "latest",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc: dict) -> dict:\n        out_doc = {\n            \"problem\": doc[\"input_question\"],\n            \"gold\": doc[\"input_correct_responses\"][0],\n        }\n        return out_doc\n\n    dataset = dataset.select(range(1200, len(dataset)))\n\n    dataset = dataset.select_columns(\n        [\n            \"input_question\",\n            \"input_correct_responses\",\n            \"input_final_prompts\",\n            \"is_correct\",\n            \"input_question_hash\",\n            \"input_choice_list\",\n            \"output_prediction_text\",\n        ]\n    )\n    dataset = dataset.rename_column(\"is_correct\", \"previously_is_correct\")\n    dataset = dataset.map(_process_doc)\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "def doc_to_text(doc: dict) -> str:\n    question, choice = doc[\"input_question\"], str(doc[\"input_choice_list\"])\n    prompt = f\"<|start_header_id|>user<|end_header_id|>You are a helpful assistant designed to help with multiple choice question. Think step by step. Question: {question}\\n {choice}\\n<|eot_id|> \\n\\n<|start_header_id|>assistant<|end_header_id|>\"\n    return prompt\n",
      "doc_to_target": "gold",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "strict-match",
          "filter": [
            {
              "function": "regex",
              "group_select": -1,
              "regex_pattern": "best answer is ([A-Z])"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "meta_mmlu_pro_instruct": 1.0
  },
  "n-shot": {
    "meta_instruct": 0,
    "meta_mmlu_pro_instruct": 0
  },
  "higher_is_better": {
    "meta_instruct": {
      "exact_match": true
    },
    "meta_mmlu_pro_instruct": {
      "exact_match": true
    }
  },
  "n-samples": {
    "meta_mmlu_pro_instruct": {
      "original": 10832,
      "effective": 100
    }
  },
  "config": {
    "model": "vllm",
    "model_args": "pretrained=meta-llama/Llama-3.3-70B-Instruct,tensor_parallel_size=4,data_parallel_size=1,dtype=auto,gpu_memory_utilization=0.8,max_model_len=8192,add_bos_token=True,seed=42",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": 100.0,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 42,
    "numpy_seed": 42,
    "torch_seed": 42,
    "fewshot_seed": 42
  },
  "git_hash": "dc406b4",
  "date": 1738200111.158929,
  "pretty_env_info": "PyTorch version: 2.5.1+cu124\nIs debug build: False\nCUDA used to build PyTorch: 12.4\nROCM used to build PyTorch: N/A\n\nOS: CentOS Stream 9 (x86_64)\nGCC version: (GCC) 11.5.0 20240719 (Red Hat 11.5.0-2)\nClang version: Could not collect\nCMake version: version 3.26.5\nLibc version: glibc-2.34\n\nPython version: 3.9.21 (main, Dec 11 2024, 16:24:11)  [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-6.4.3-0_fbk14_hardened_2601_gcd42476b84e9-x86_64-with-glibc2.34\nIs CUDA available: True\nCUDA runtime version: 12.0.140\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA H100\nGPU 1: NVIDIA H100\nGPU 2: NVIDIA H100\nGPU 3: NVIDIA H100\nGPU 4: NVIDIA H100\nGPU 5: NVIDIA H100\nGPU 6: NVIDIA H100\nGPU 7: NVIDIA H100\n\nNvidia driver version: 550.90.07\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                       x86_64\nCPU op-mode(s):                     32-bit, 64-bit\nAddress sizes:                      52 bits physical, 57 bits virtual\nByte Order:                         Little Endian\nCPU(s):                             368\nOn-line CPU(s) list:                0-367\nVendor ID:                          AuthenticAMD\nModel name:                         AMD EPYC 9654 96-Core Processor\nCPU family:                         25\nModel:                              17\nThread(s) per core:                 1\nCore(s) per socket:                 368\nSocket(s):                          1\nStepping:                           1\nBogoMIPS:                           4792.78\nFlags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm rep_good nopl cpuid extd_apicid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm cmp_legacy svm cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw topoext perfctr_core invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced vmmcall fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves avx512_bf16 clzero xsaveerptr wbnoinvd arat npt lbrv nrip_save tsc_scale vmcb_clean pausefilter pfthreshold v_vmsave_vmload vgif vnmi avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg avx512_vpopcntdq rdpid fsrm flush_l1d arch_capabilities\nVirtualization:                     AMD-V\nHypervisor vendor:                  KVM\nVirtualization type:                full\nL1d cache:                          23 MiB (368 instances)\nL1i cache:                          23 MiB (368 instances)\nL2 cache:                           184 MiB (368 instances)\nL3 cache:                           16 MiB (1 instance)\nNUMA node(s):                       1\nNUMA node0 CPU(s):                  0-367\nVulnerability Gather data sampling: Not affected\nVulnerability Itlb multihit:        Not affected\nVulnerability L1tf:                 Not affected\nVulnerability Mds:                  Not affected\nVulnerability Meltdown:             Not affected\nVulnerability Mmio stale data:      Not affected\nVulnerability Retbleed:             Not affected\nVulnerability Spec store bypass:    Vulnerable\nVulnerability Spectre v1:           Vulnerable: __user pointer sanitization and usercopy barriers only; no swapgs barriers\nVulnerability Spectre v2:           Vulnerable, IBPB: disabled, STIBP: disabled, PBRSB-eIBRS: Not affected\nVulnerability Srbds:                Not affected\nVulnerability Tsx async abort:      Not affected\n\nVersions of relevant libraries:\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==1.26.4\n[pip3] onnx==1.17.0\n[pip3] onnxruntime==1.19.2\n[pip3] torch==2.5.1\n[pip3] torchvision==0.20.1\n[pip3] triton==3.1.0\n[conda] numpy                     1.26.4                   pypi_0    pypi\n[conda] torch                     2.5.1                    pypi_0    pypi\n[conda] torchvision               0.20.1                   pypi_0    pypi\n[conda] triton                    3.1.0                    pypi_0    pypi",
  "transformers_version": "4.48.1",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|finetune_right_pad_id|>",
    128004
  ],
  "tokenizer_eos_token": [
    "<|eot_id|>",
    128009
  ],
  "tokenizer_bos_token": [
    "<|begin_of_text|>",
    128000
  ],
  "eot_token_id": 128009,
  "max_length": 8192,
  "task_hashes": {
    "meta_mmlu_pro_instruct": "bae9e099c0da405ea0407272162a9cd89b18031e28fa7b96d3be02ca0497838f"
  },
  "model_source": "vllm",
  "model_name": "meta-llama/Llama-3.3-70B-Instruct",
  "model_name_sanitized": "meta-llama__Llama-3.3-70B-Instruct",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 629363.359711692,
  "end_time": 629474.810963252,
  "total_evaluation_time_seconds": "111.45125156000722"
}